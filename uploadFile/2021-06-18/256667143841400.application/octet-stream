#테이블 생성
CREATE TABLE t_student(
	st_id INT AUTO_INCREMENT,
	st_name VARCHAR(20) NOT NULL DEFAULT '' COMMENT '이름',
	ST_height VARCHAR(20),
	st_weight VARCHAR(20),
	st_school VARCHAR(20),
	st_major VARCHAR(20),
	st_birth VARCHAR(10),
	st_content TEXT,
	insert_date DATETIME,
	modify_date DATETIME,
	PRIMARY KEY(st_id)
	)DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
	
CREATE TABLE t_student_score(
	sc_id INT AUTO_INCREMENT,
	st_id INT,
	sc_score INT,
	sc_course VARCHAR(20),
	sc_point INT,
	PRIMARY KEY(sc_id)
	)DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;	

INSERT INTO t_student_score SET st_id='1', sc_score='97', sc_course='JAVASCRIPT',sc_point='3';
INSERT INTO t_student_score SET st_id='1', sc_score='56', sc_course='DB',sc_point='5';
INSERT INTO t_student_score SET st_id='1', sc_score='67', sc_course='HTML',sc_point='2';
INSERT INTO t_student_score SET st_id='3', sc_score='54', sc_course='JAVASCRIPT',sc_point='3';
INSERT INTO t_student_score SET st_id='3', sc_score='75', sc_course='DB',sc_point='5';
INSERT INTO t_student_score SET st_id='4', sc_score='81', sc_course='HTML',sc_point='2';
INSERT INTO t_student_score SET st_id='5', sc_score='67', sc_course='JAVASCRIPT',sc_point='3';
INSERT INTO t_student_score SET st_id='5', sc_score='91', sc_course='DB',sc_point='5';
INSERT INTO t_student_score SET st_id='5', sc_score='75', sc_course='HTML',sc_point='2';
INSERT INTO t_student_score SET st_id='5', sc_score='70', sc_course='CSS',sc_point='2';

SELECT *FROM t_student_score;

#예제1) 학생점수테이블에서 최고, 최저 점수를 구하세요.
SELECT MAX(sc_score) AS '최고점수',MIN(sc_score) AS '최저점수' FROM t_student_score;
#예제2) 학생 ID별 평균점수를 구하세요.
AS T1 INNER JOIN t_student_score T2 ON T1.st_id = T2.st_id 
SELECT T1.st_id AS '학생ID',T1.st_name ,AVG(T2.sc_score) FROM t_student AS T1 JOIN t_student_score AS T2 ON T1.st_id = T2.st_id ;
#SELECT st_id as '학생ID', avg(sc_score) as '평균', count(*)as '수강한 과목' from t_student_score group by(st_id);
#예제3) 학생별로 점수등록이 3개이상일 경우, 최고점, 최저점을 제외한 평균을, 3개미만일 경우 모든 점수의 평균을 구하세요.
SELECT IF(COUNT(*) >=3, (SUM(sc_score)- MAX(sc_score) - MIN(sc_score)) / (COUNT(*) - 2), AVG(sc_score)) AS '평균' FROM t_student_score GROUP BY st_id;

#예제4) 전체의 점수, 점수등급을 출력하세요.(95이상 A+, 90이상 A, 85이상 B+, 80이상 B, 75이상 C+, 70이상 C, 65이상 D+, 60이상 D, 60 미만 F)
SELECT sc_score, CASE
			WHEN sc_score >= 95 THEN 'A+'
			WHEN sc_score >= 90 THEN 'A'
			WHEN sc_score >= 85 THEN 'B+'
			WHEN sc_score >= 80 THEN 'B'
			WHEN sc_score >= 75 THEN 'C+'
			WHEN sc_score >= 70 THEN 'C'
			WHEN sc_score >= 65 THEN 'D+'
			WHEN sc_score >= 60 THEN 'D'
			ELSE 'F'
		END AS 등급

FROM t_student_score;	
#예제5) t_student table에서 각 학생별 나이를 구하세요.
#지금년도 - 생년월일의 년도 + 1
SELECT st_name, st_birth, DATE_FORMAT(NOW(),'%Y') - LEFT(st_birth, 4)+1 FROM t_student;
SELECT st_name, st_birth, LEFT(NOW(),4) - LEFT(st_birth,4) +1  AS '나이' FROM t_student;
#데이터 자료형
#문자형, 숫자형, 날짜형
#문자형
#char(5)
#varchar(10) '안녕하세요'
#text  

#int
#tinyint
#float

#date		'YYYY-MM-DD'
#datetime	'YYYY-MM-DD HH:II:SS'	
#time		'HH:II:SS'

#전체 테이블 조회
SHOW TABLES;

#테이블 구조확인
DESC t_student;

#테이블 생성 쿼리 확인
SHOW CREATE TABLE t_student;

#테이블 삭제
DROP TABLE t_student;

#테이블 컬럼 추가
ALTER TABLE t_student ADD st_nick VARCHAR(10) AFTER st_name;

#테이블 칼럼 수정
ALTER TABLE t_student MODIFY st_nick VARCHAR(50);

#테이블 컬럼 삭제
ALTER TABLE t_student DROP st_nick;

#테이블명 변경
ALTER TABLE t_student RENAME TO t_student2;
ALTER TABLE t_student2 RENAME TO t_student;

#데이터 등록
INSERT INTO t_student(st_name,st_height, st_weight, st_school, st_major, st_birth, insert_date)
VALUES('홍길동','180','70','휴스타학교','컴퓨터공학과','1990-01-01',NOW());

INSERT INTO t_student(st_name,st_height, st_weight, st_school, st_major, st_birth, insert_date)
VALUES('조인성','170','81','휴스타학교','디자인학과','1990-01-09',NOW());

INSERT INTO t_student(st_name,st_height, st_weight, st_school, st_major, st_birth, insert_date)
VALUES('김태희','160','70','IACT학교','컴퓨터공학과','1992-12-31',NOW());

INSERT INTO t_student(st_name,st_height, st_weight, st_school, st_major, st_birth, insert_date)
VALUES('송혜교','158','45','IACT학교','디자인과','1990-12-01',NOW());

INSERT INTO t_student(st_name,st_height, st_weight, st_school, st_major, st_birth, insert_date)
VALUES('송중기','176','65','휴스타학교','컴퓨터공학과','1990-03-01',NOW());

INSERT INTO t_student(st_name,st_height, st_weight, st_school, st_major, st_birth, insert_date)
VALUES('유재석','179','73','iact학교','컴퓨터공학과','1990-04-01',NOW());

INSERT INTO t_student SET
st_name = '김종국',
st_height = '170',
st_weight = '80',
st_school = '휴스타학교',
st_major = '컴퓨터공학과',
st_birth = '1989-07-21',
insert_date = NOW()


#데이터 수정
UPDATE t_student SET st_school = 'IACT학교' WHERE st_name = '유재석'
UPDATE t_student SET st_height = '170' WHERE st_id = '1'
UPDATE t_student SET st_height = st_height+1 WHERE st_id = '1'

#데이터 삭제
DELETE FROM t_student WHERE st_id='2';
DELETE FROM t_student;

#데이터 조회
SELECT *FROM t_student;
SELECT st_name, st_school, st_birth FROM t_student;
SELECT st_name AS '이름' FROM t_student;
#as 빼고도 별칭 가능 
SELECT st_name, st_name '이름' FROM t_student;

#count
SELECT COUNT(*) AS 갯수 FROM t_student;

#orderby
#이름 순으로 정렬 asc : 오름차순 desc 내림차순
SELECT *FROM t_student WHERE (1) ORDER BY st_name ASC;
#키 순으로 내림차순 정렬 
SELECT st_height, st_name FROM t_student WHERE (1) ORDER BY st_height DESC;
#키 순으로 정렬 후 같은 것 이름 순 오름차순 정렬
SELECT st_height, st_name FROM t_student WHERE (1) ORDER BY st_height DESC, st_name ASC;
SELECT *FROM t_student ORDER BY insert_date DESC, st_id DESC;

#where
SELECT *FROM t_student WHERE st_name='조인성';
SELECT *FROM t_student WHERE st_height='170';
SELECT *FROM t_student WHERE st_id='7';
#이름에 김이라는 글자가 들어가면 찾는다.
SELECT *FROM t_student WHERE st_name LIKE '%김%';
SELECT *FROM t_student WHERE st_height >= 170 AND st_weight <= 75;

#max, min, avg, sum
SELECT MAX(st_height) FROM t_student;
SELECT MIN(st_height) FROM t_student;
SELECT AVG(st_height) FROM t_student;
SELECT SUM(st_height) FROM t_student WHERE st_name LIKE '김%';

#distinct
SELECT DISTINCT st_school FROM t_student;

#group by
SELECT * FROM t_student;
#학교 이름으로 묶어서 학교명을 출력해라.
SELECT st_school FROM t_student GROUP BY st_school;
#각 학교의 인원을 구하고 가장 키 큰 사람과 가장 키가 작은 사람 키의 평균 합계를  출력해라
SELECT st_school,COUNT(*) AS cnt,
MAX(st_height) AS max_height,
MIN(st_height) AS min_height,
AVG(st_height) AS avg_height,
SUM(st_height) AS sum_height 
FROM t_student 
GROUP BY st_school;

SELECT st_school,GROUP_CONCAT(st_name ORDER BY st_height SEPARATOR '|') AS st_names FROM t_student GROUP BY st_school;

#limit  0번째 부터 2개만 보겠다.
SELECT * FROM t_student WHERE st_school LIKE 'IACT%' ORDER BY st_name ASC LIMIT 0, 2;

#if 데이터를 가공하거나 추려낼 때 사용
SELECT st_name, IF(st_name = '유재석','개그맨','기타')  AS job FROM t_student;
SELECT st_height, IF(st_height > 175 , '장신','단신') AS height FROM t_student;
SELECT SUM(IF(st_height > 175, st_height, 0)) FROM t_student;
SELECT SUM(st_height) FROM t_student WHERE st_height > 175; 

#ifnull null인지 아닌지
SELECT *FROM t_student;
SELECT *,  IFNULL(modify_date, '0000-00-00 00:00:00') AS modify_date2 FROM t_student;

#case when
SELECT
	st_name,
	CASE
		WHEN st_name = '유재석' THEN '개그맨'
		WHEN st_name = '김종국' THEN '가수'
		ELSE '기타'
	END AS job
FROM t_student;


#예제) 학생중 키가 175이하인 학생중 키가 제일 큰 학생의 이름, 키를 구하세요
SELECT * FROM t_student;

SELECT st_name AS '이름',st_height AS '키' FROM t_student WHERE st_height = (SELECT MAX(st_height) FROM t_student WHERE st_height <= 175); 

SELECT st_name AS '이름',st_height AS '키' FROM t_student WHERE st_height <= 175 
ORDER BY st_height DESC LIMIT 0,1;

#기타 함수들
#abs
SELECT (st_height * -1), ABS(st_height*-1) FROM t_student;

#floor(소수점 버림)
SELECT st_weight, (st_weight/10), FLOOR(st_weight/10) FROM t_student;

#ceiling(소수점 올림)
SELECT st_weight, (st_weight/10), CEILING(st_weight/10) FROM t_student;

#round(반올림)
SELECT st_weight, (st_weight / 7 ) FROM t_student;
SELECT st_weight, (st_weight / 7 ), ROUND((st_weight/7), 0) FROM t_student;
SELECT st_weight, (st_weight / 7 ), ROUND((st_weight/7), 2) FROM t_student;
SELECT st_weight, (st_weight / 7 ), ROUND((st_weight/7), -1) FROM t_student;

#concat 
SELECT CONCAT('1','2','3','4') FROM t_student;
SELECT *, CONCAT(st_school , '_',st_major,'_',st_name) FROM t_student;

#replace
SELECT st_name, REPLACE(st_name, '홍', '김') FROM t_student;

#left, right, substring(mid)
SELECT st_name, LEFT(st_name,1) FROM t_student;
SELECT st_birth, LEFT(st_birth,4) FROM t_student;
SELECT st_birth, RIGHT(st_birth,2) FROM t_student;
SELECT insert_date, LEFT(insert_date, 10), RIGHT(insert_date,8) FROM t_student;
SELECT st_birth, SUBSTRING(st_birth,6,2) FROM t_student;
SELECT st_birth, SUBSTRING(st_birth,9,2) FROM t_student;

#ltrim, rtrim ,trim(공백제거)
UPDATE t_student SET st_name = ' 홍길동' WHERE st_id='1';
SELECT st_name, LTRIM(st_name) FROM t_student;
SELECT st_name, RTRIM(st_name) FROM t_student;
SELECT st_name, TRIM(st_name) FROM t_student;
SELECT * FROM t_student WHERE LTRIM(st_name) = '홍길동';

#date_add, date_sub
SELECT insert_date, DATE_ADD(insert_Date,INTERVAL+1 YEAR) FROM t_student;
SELECT insert_date, DATE_ADD(insert_Date,INTERVAL+2 MONTH) FROM t_student;
SELECT insert_date, DATE_ADD(insert_Date,INTERVAL+3 DAY) FROM t_student;
SELECT insert_date, DATE_ADD(insert_Date,INTERVAL+4 HOUR) FROM t_student;
SELECT insert_date, DATE_ADD(insert_Date,INTERVAL+5 MINUTE) FROM t_student;
SELECT insert_date, DATE_ADD(insert_Date,INTERVAL+6 SECOND) FROM t_student;

SELECT insert_date, DATE_ADD(insert_date,INTERVAL -1 YEAR)FROM t_student;

#date format
SELECT insert_date, DATE_FORMAT(insert_date, '%Y.%m.%d,%h:%i:%s') FROM t_student;

#2중 select select (보여주기 위한 친구) from where(테이블을 추려주기 위한 친구) : 다음과 같이 작성할 경우 에러 
SELECT st_id, AVG(sc_score) AS avg_score FROM t_student_score GROUP BY st_id;
SELECT st_id, AVG(sc_score) AS avg_score FROM t_student_score WHERE avg_score >= 80 GROUP BY st_id;
#from에 avg_score를 테이블을 미리 만들어두고 거기서 where을 통해 검색함
SELECT 
	st_id,
	avg_score
FROM 
	(SELECT st_id, AVG(sc_score) AS avg_score FROM t_student_score GROUP BY st_id) AS T1 
WHERE avg_score >=80

#평균점수가 가장 높은 2명 학생ID를 구하세요.
#SELECT st_id, AVG(sc_score) AS avg_score FROM t_student_score GROUP BY st_id ORDER BY avg_score DESC LIMIT 0,2;
SELECT 
	st_id AS st_id,
	avg_score
FROM
	(SELECT st_id, AVG(sc_score) AS avg_score FROM t_student_score GROUP BY st_id) T1
ORDER BY avg_score DESC
LIMIT 0, 2

#?
	#SELECT st_id, AVG(sc_score) AS avg_score FROM t_student_score GROUP BY st_id ORDER BY avg_score DESC limit 0, 2

	

SELECT *FROM t_student;
UPDATE t_student SET st_name = '홍길동' WHERE st_id = '8';

#예제1) 학생 테이블에서 학생 중 동명이인이 존재하는 학생의 이름, 몇명인지를 출려하세요.
SELECT 
	st_name,
	cnt
FROM
	(SELECT st_name, COUNT(*) AS cnt FROM t_student GROUP BY st_name) T1
WHERE
	cnt > 1;
ORDER BY cnt DESC, st_name ASC;

#예제2) 학생점수 테이블에서 학생별 수강한 학점의 합순으로 정렬하세요.
# 등급이 F면 학점인정 안됨 그 위로는 몇 학점을 들었는지
SELECT *FROM t_student_score;

SELECT 
	st_id,SUM(sc_point) 'sc_point'  
FROM 
	(SELECT st_id, sc_score, sc_point FROM t_student_score WHERE sc_score>=60) T1
GROUP BY 
	st_id
ORDER BY sc_point DESC;

SELECT st_id,
	SUM(sc_point) AS sc_point
FROM
(SELECT
	st_id,
	sc_score,
	sc_point, CASE
			WHEN sc_score >= 95 THEN 'A+'
			WHEN sc_score >= 90 THEN 'A'
			WHEN sc_score >= 85 THEN 'B+'
			WHEN sc_score >= 80 THEN 'B'
			WHEN sc_score >= 75 THEN 'C+'
			WHEN sc_score >= 70 THEN 'C'
			WHEN sc_score >= 65 THEN 'D+'
			WHEN sc_score >= 60 THEN 'D'
			ELSE 'F'
		END AS grade

FROM t_student_score	
) AS T1
WHERE grade <> 'F'
GROUP BY st_id
ORDER BY sc_point DESC;	

#t_student 테이블에 st_pass varchar(10) 컬럼을 추가하고, 평균점수가 70점 이상인 학생들의  st_pass값을 '합격'으로 변경
ALTER TABLE t_student ADD st_pass VARCHAR(10);
SELECT *FROM t_student;

UPDATE t_student SET st_pass = '합격' WHERE st_id ='1' OR st_id = '2';
UPDATE t_student SET st_pass = '합격'
WHERE st_id IN(
	SELECT
		st_id
	FROM
		(SELECT st_id, AVG(sc_score) AS avg_score FROM t_student_score GROUP BY st_id) AS T1
	WHERE avg_score >= 70
		
); 

#join
#inner join
SELECT *FROM t_student AS T1 INNER JOIN t_student_score T2 ON T1.st_id = T2.st_id 
#outer join
#left outer join, right outer join
SELECT *FROM t_student AS T1 LEFT OUTER JOIN t_student_score T2 ON T1.st_id = T2.st_id
SELECT *FROM t_student AS T1 RIGHT OUTER JOIN t_student_score T2 ON T1.st_id = T2.st_id

SELECT *FROM t_student_score;
SELECT COUNT(*)FROM t_student AS T1 JOIN t_student_score T2 
SELECT st_id, AVG(sc_score) avg_score FROM t_student_score GROUP BY st_id;
#왼쪽 것을 기준으로 왼쪽은 모두 출력하고 오른쪽 것을 붙임  없는 것은 NULL로 표시함
#기본 join으로 할 경우 왼쪽 오른쪽 모두 있는 경우 출력 
SELECT
	T1.st_name, T2.avg_score, T2.max_score
FROM t_student AS T1 
LEFT OUTER JOIN
(
	SELECT
		st_id,AVG(sc_score) avg_score, MAX(sc_score) max_score
	FROM t_student_score
	GROUP BY st_id
) T2
ON T1.st_id = T2.st_id
#left outer join
#(
#	select
#		st_id, max(sc_score) max_score
#	from t_student_score
#	group by st_id
#) T3
#on T1.st_id = T3.ST_ID
#where T2.avg_score IS NOT NULL
ORDER BY T1.st_name ASC;

#예제) 학교가 휴스타학교인 학생 중 키가 170이상이고, 점수 데이터가 입력된 사람중  총점이 가장 낮은 1명의 이름, 총점을 구하세요.
SELECT *FROM t_student;
SELECT *FROM t_student_score;

SELECT 
	st_name,SUM(sc_score) AS 'score' 
FROM
	(SELECT st_id, st_name FROM t_student WHERE st_school = '휴스타학교' AND 'ST_height' > '170') T1
left outer join 
	t_student_score T2 on T1.st_id = T2.st_id
where sc_score IS NOT NULL
GROUP BY st_name
ORDER BY score asc
LIMIT 0,1;

select 
	T1.st_name, T2.sum_score
from t_student T1
left outer join(
	select st_id, sum(sc_score) as sum_score from t_student_score group by st_id
	) T2
on T1.st_id = T2.st_id
where st_school = '휴스타학교' and st_height >= 170 and sum_score > 0
order by sum_score asc
limit 0,1;


SELECT 
	T1.st_name, T2.sum_score
FROM t_student T1
JOIN(
	SELECT st_id, SUM(sc_score) AS sum_score FROM t_student_score GROUP BY st_id
	) T2
ON T1.st_id = T2.st_id
WHERE st_school = '휴스타학교' AND st_height >= 170
ORDER BY sum_score
LIMIT 0,1;

select *from t_student;

create table t_school(
	sl_id int auto_increment,
	sl_name varchar(20),
	primary key(sl_id)
);

show tables;
desc t_school;


alter table t_student add sl_id int;
desc t_student;

insert into t_school set sl_name ='휴스타학교';
insert into t_school set sl_name = 'IACT학교';

select * from t_school;

select st_school, sl_id from t_student;
update t_student set sl_id ='1' where st_school = '휴스타학교';
UPDATE t_student set sl_id ='2' WHERE st_school = 'IACT학교';

update t_student set sl_id=(
		case
			when st_school='휴스타학교' then '1'
			when st_school='IACT학교' THEN '2'
			ELSE '0'
		END	
	)

SELECT * FROM t_school;
delete from t_school where sl_id in('3','4');

alter table t_student drop st_school; 

select T1.*,T2.* from t_student T1 left outer join t_school T2 on T1.sl_id = T2.sl_id

#예제1) t_student table에서 st_major에 대한 부분을 따로 테이블을 생성하고 데이터 insert,
# t_student에 ma_id추가, 해당학과에 맞는 키값 등록, join 쿼리 실행

create table t_major(
	mr_id int auto_increment,
	mr_name varchar(20),
	primary key(mr_id)
);
insert into t_major set mr_name = '컴퓨터공학과'
INSERT INTO t_major SET mr_name = '디자인과'
select * from t_student
ALTER TABLE t_student ADD mr_id INT;
desc t_student;

UPDATE t_student SET mr_id=(
		CASE
			WHEN st_major='컴퓨터공학과' THEN '1'
			WHEN st_major='디자인과' THEN '2'
			ELSE '0'
		END	
	)

alter table t_student drop st_major;
DESC t_student;
select * from t_major;
select T1.st_id,T1.st_name, T2.mr_name from t_student T1 left outer join t_major T2 on T1.mr_id = T2.mr_id;
select 
	T1.*, T2.*, T3.*
from t_student T1
left outer join	t_school T2 on T1.sl_id = T2.sl_id
left outer join t_major T3 on T1.mr_id = T3.mr_id;

#index

#view : 자주 사용하는 것들을 테이블로 만들어서 사용하는 것 
create view v_student as
	select *from t_student where st_height >= 170
select * from t_student;
select * from v_student;

create view v_student_score_sum as
	select st_id, sum(sc_score) as sum_score from t_student_score group by st_id
select *from v_student_score_sum;

create view v_student_score_grade as
	select
		*, 
		CASE
			WHEN sc_score >= 95 THEN 'A+'
			WHEN sc_score >= 90 THEN 'A'
			WHEN sc_score >= 85 THEN 'B+'
			WHEN sc_score >= 80 THEN 'B'
			WHEN sc_score >= 75 THEN 'C+'
			WHEN sc_score >= 70 THEN 'C'
			WHEN sc_score >= 65 THEN 'D+'
			WHEN sc_score >= 60 THEN 'D'
			ELSE 'F'
		END AS grade
	from t_student_score 

select * from v_student_score_grade;

#과목명 검색 실습 등 여러가지 실습을 한다.
